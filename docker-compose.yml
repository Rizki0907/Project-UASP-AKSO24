version: '3.8'

services:
  nginx:
    image: nginx:latest
    ports:
      - "8081:80"
    networks:
      - web_network
    configs:
      - source: nginx_default_conf
        target: /etc/nginx/conf.d/default.conf  # Tempat konfigurasi di dalam container
    volumes:
      - ./nginx/html:/usr/share/nginx/html
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  mysql:
  image: mysql:latest
  env_file:
    - ./mysql/.env  # Mengarahkan ke file .env di folder mysql
  environment:
    MYSQL_ROOT_PASSWORD: rootpassword
    MYSQL_DATABASE: exampledb
    MYSQL_USER: user
    MYSQL_PASSWORD: userpassword
  ports:
    - "3306:3306"
  networks:
    - web_network
  volumes:
    - ./mysql/custom.conf:/etc/mysql/conf.d/custom.cnf  # Konfigurasi custom untuk MySQL
    - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql  # File inisialisasi database
    - mysql_data:/var/lib/mysql  # Volume untuk menyimpan data sementara
  configs:
    - source: mysql_custom_conf
      target: /etc/mysql/conf.d/custom.cnf  # Mengarahkan file config melalui configs
  restart: always
  healthcheck:
    test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
    interval: 30s
    timeout: 10s
    retries: 3
      
  redis:
    image: redis:latest  
    ports:
      - "6379:6379"  # Memetakan port 6379 di host ke container Redis
    networks:
      - web_network  # Menghubungkan Redis ke jaringan yang sama dengan service lain
    healthcheck:  # Mengecek kesehatan Redis
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  web_network:
    driver: bridge

configs:
  nginx_default_conf:
    file: ./nginx/default.conf  # Menunjuk ke file default.conf di direktori proyek
  mysql_custom_conf:
    file: ./mysql/custom.cnf  # Konfigurasi custom MySQL


